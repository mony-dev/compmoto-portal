// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  encryptedPassword  String              @map("encrypted_password") @db.VarChar(255)
  name               String?
  role               Role                @default(USER)
  saleUserId         Int?                
  saleUser           User?               @relation("UserToSaleUser", fields: [saleUserId], references: [id])
  users              User[]              @relation("UserToSaleUser")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  status             UserStatus          @default(Pending)
  language           Language            @default(English)
  paymentTerms       String? 
  creditPoint        Int?                @default(0)
  rewardPoint        Int                 @default(0)
  phoneNumber        String?
  birthDate          DateTime?
  gender             String?
  vatNo              String?
  custAddress        String?
  shipToAddress      String?
  balanceLCY         Int?
  contactName        String?
  custPriceGroup     String?
  custNo             String
  sessions           Session[]
  userLogs           UserLog[]          

  @@index([id])
  @@map("users")
}

model UserLog {                         
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String
  createdAt DateTime @default(now())

  @@index([id])
  @@map("user_logs")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @map("session_token")
  refreshToken String   @map("refresh_token")
  expireIn     Int      @map("expires_in")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RewardCategory {
  id        Int       @id @default(autoincrement())
  name      String
  isActive  Boolean
  rewards   Reward[]
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model Image {
  id          Int           @id @default(autoincrement())
  url        String
  rewardAlbumId Int
  rewardAlbum  RewardAlbum @relation(fields: [rewardAlbumId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model Reward {
  id              Int            @id @default(autoincrement())
  rewardCategoryId Int
  rewardCategory  RewardCategory @relation(fields: [rewardCategoryId], references: [id])
  name            String
  point           Int
  startDate       DateTime
  endDate         DateTime
  file            String
  image           String
  rewardAlbum     RewardAlbum?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model RewardAlbum {
  id        Int     @id @default(autoincrement())
  name      String
  rewardId  Int     @unique
  reward    Reward  @relation(fields: [rewardId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  images    Image[]
}

enum Language {
  English @map("english")
  Thai    @map("thai")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  CLAIM
  SALE
}

enum AdminRole {
  SuperAdmin @map("super_admin")
  Admin      @map("admin")
  Claim      @map("claim")
}

enum AdminStatus {
  Pending  @map("pending")
  Active   @map("active")
  Inactive @map("inactive")
}

enum UserStatus {
  Pending  @map("pending")
  Active   @map("active")
  Inactive @map("inactive")
}

enum VerificationType {
  PhoneAuthentication @map("phone_authentication")
  ResetPassword       @map("reset_password")
}
