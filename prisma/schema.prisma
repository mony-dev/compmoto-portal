// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  encryptedPassword  String              @map("encrypted_password") @db.VarChar(255)
  encryptedPasswordtext String?             @db.VarChar(255) 
  name               String?
  role               Role                @default(USER)
  saleUserId         Int?                
  saleUser           User?               @relation("UserToSaleUser", fields: [saleUserId], references: [id])
  users              User[]              @relation("UserToSaleUser")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  status             UserStatus          @default(Pending)
  language           Language            @default(English)
  paymentTerms       String? 
  creditPoint        Int?                @default(0)
  rewardPoint        Float                 @default(0)
  phoneNumber        String?
  birthDate          DateTime?
  image              String? 
  gender             String?
  vatNo              String?
  custAddress        String?
  shipToAddress      String?
  balanceLCY         Int?
  contactName        String?
  custPriceGroup     String?
  custNo             String                @unique
  cn                 Float                 @default(0)
  cnBrand            Json?                  
  loyaltyPoint       Float                 @default(0)
  sessions           Session[]
  userLogs           UserLog[]          
  userRewards        UserReward[]     
  cart               Cart?
  orders             Order[]     
  invoices           Invoice[]  
  minisizes             Minisize[]  @relation("UserMinisizes")
  totalPurchaseHistories  TotalPurchaseHistory[]
  SpecialBonusHistories  SpecialBonusHistory[]
  rewardPointHistories               RewardPointHistory[]
  claim               Claim[]
  memoCredit          MemoCredit[]
  @@index([id])
  @@map("users")
}

model UserLog {                         
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String
  createdAt DateTime @default(now())

  @@index([id])
  @@map("user_logs")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @map("session_token")
  refreshToken String   @map("refresh_token")
  expireIn     Int      @map("expires_in")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RewardCategory {
  id        Int       @id @default(autoincrement())
  name      String
  isActive  Boolean
  rewards   Reward[]
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model Image {
  id          Int           @id @default(autoincrement())
  url        String
  rewardAlbumId Int
  rewardAlbum  RewardAlbum? @relation(fields: [rewardAlbumId], references: [id], onDelete: Cascade) 
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model Reward {
  id              Int            @id @default(autoincrement())
  rewardCategoryId Int
  rewardCategory  RewardCategory @relation(fields: [rewardCategoryId], references: [id])
  name            String
  point           Int
  startDate       DateTime
  endDate         DateTime
  file            String
  image           String
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  userRewards          UserReward[]     
}

model RewardAlbum {
  id        Int     @id @default(autoincrement())
  name      String
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  images    Image[]
}

model UserReward {
  id          Int      @id @default(autoincrement())
  rewardId    Int
  reward      Reward   @relation(fields: [rewardId], references: [id])
  userId      Int
  quantity    Int
  user      User     @relation(fields: [userId], references: [id])
  isComplete  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([rewardId])
  @@index([userId])
}

enum Language {
  English @map("english")
  Thai    @map("thai")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  CLAIM
  SALE
}

enum AdminRole {
  SuperAdmin @map("super_admin")
  Admin      @map("admin")
  Claim      @map("claim")
}

enum AdminStatus {
  Pending  @map("pending")
  Active   @map("active")
  Inactive @map("inactive")
}

enum UserStatus {
  Pending  @map("pending")
  Active   @map("active")
  Inactive @map("inactive")
}

enum VerificationType {
  PhoneAuthentication @map("phone_authentication")
  ResetPassword       @map("reset_password")
}

model ProductGroup {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rim {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ComRate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Family {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrandMinisize {
  brandId     Int
  minisizeId  Int
  brand       Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
  minisize    Minisize    @relation(fields: [minisizeId], references: [id], onDelete: Cascade)

  @@id([brandId, minisizeId]) 
}

model Brand {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  minisizes         BrandMinisize[]
  products          Product[]
}

model Minisize {
  id                Int      @id @default(autoincrement())
  isActive          Boolean
  name              String
  lv1               Json
  lv2               Json
  lv3               Json
  imageProfile      String?
  mediaBanner       String?
  newsBanner        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  users             User[]    @relation("UserMinisizes")
  products          Product[]
  promotions        Promotion[]
  media             Media[]
  news              News[]
  brands            BrandMinisize[]
  specialBonusItem  SpecialBonusItem[]
}



model Product {
  id                  Int      @id @default(autoincrement())
  code                String   @unique
  name                String
  brandId             Int
  price               Float
  navStock            Int
  portalStock         Int
  minisizeId          Int?
  promotionId         Int?
  years               Json
  lv1Id               Int?
  lv2Id               Int?
  lv3Id               Int?
  image               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  brand               Brand    @relation(fields: [brandId], references: [id])
  minisize            Minisize? @relation(fields: [minisizeId], references: [id])
  promotion           Promotion? @relation(fields: [promotionId], references: [id])
  imageProducts       ImageProduct[]
  cartItems           CartItem[] 
  orderItems          OrderItem[] 
  invoiceItems        InvoiceItem[] 
  claim               Claim[]
}

model Promotion {
  id            Int      @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean
  name          String
  amount        Float
  minisizeId    Int
  userGroup     String
  productRedeem String
  minisize      Minisize @relation(fields: [minisizeId], references: [id])
  products      Product[]
  image           String
}

model ImageProduct {
  id          Int           @id @default(autoincrement())
  url        String
  productId Int
  product  Product @relation(fields: [productId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

enum OrderType {
  Normal  @map("normal")
  Back   @map("back")
}

model Cart {
  id       Int        @id @default(autoincrement())
  userId   Int        @unique
  user     User       @relation(fields: [userId], references: [id])
  items    CartItem[]
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  amount    Int
  type      OrderType
  price     Float
  year      String?
  discount  Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([cartId, productId])
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  items       OrderItem[]
  totalAmount Float
  totalPrice  Float
  subTotal    Float
  groupDiscount  Int
  type        OrderType    
  externalDocument String?
  documentNo String
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  order      Order   @relation(fields: [orderId], references: [id])
  productId  Int
  product   Product  @relation(fields: [productId], references: [id])
  amount     Int
  type       String
  price      Float
  year       Int?
  discount   Int
  discountPrice Float
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([orderId, productId])
}

enum MediaType {
  File  @map("file")
  Video   @map("video")
  Image   @map("image")
}

model Media {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean
  name          String
  minisizeId    Int
  minisize      Minisize @relation(fields: [minisizeId], references: [id])
  image         String?
  type          MediaType   
  url           String @default("")
  coverImg      String?
  duration      String? @default("")
}

model News {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean
  name          String
  minisizeId    Int
  minisize      Minisize @relation(fields: [minisizeId], references: [id])
  coverImg      String
  content       String
}

model Invoice {
  id                  Int          @id @default(autoincrement())
  userId              Int
  user                User         @relation(fields: [userId], references: [id])
  documentNo            String
  date                DateTime     
  totalAmount         Float
  items               InvoiceItem[]
  totalPrice          Float
  subTotal            Float
  groupDiscount       Int
  externalDocument   String?
  checked             Boolean      @default(false)
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}


model InvoiceItem {
  id         Int     @id @default(autoincrement())
  invoiceId    Int
  invoice      Invoice   @relation(fields: [invoiceId], references: [id])
  productId  Int
  product   Product  @relation(fields: [productId], references: [id])
  amount     Int
  price      Float
  discount   Int
  discountPrice Float
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([invoiceId, productId])
}


model TotalPurchase {
  id                  Int          @id @default(autoincrement())
  month               Int
  year                Int
  resetDate           DateTime
  isActive            Boolean            
  items               TotalPurchaseItem[]
  totalPurchaseHistories TotalPurchaseHistory[]
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model TotalPurchaseItem {
  id                  Int          @id @default(autoincrement())
  totalPurchaseId     Int
  totalPurchase       TotalPurchase   @relation(fields: [totalPurchaseId], references: [id])
  totalPurchaseAmount       Float
  cn                  Float     
  incentivePoint      Float
  loyaltyPoint        Float
  order               Int
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model SpecialBonus {
  id                  Int          @id @default(autoincrement())
  month              Int
  year                Int
  resetDate           DateTime
  isActive            Boolean 
  items               SpecialBonusItem[]
  SpecialBonusHistories SpecialBonusHistory[]
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model SpecialBonusItem {
  id                  Int          @id @default(autoincrement())
  specialBonusId     Int
  specialBonus       SpecialBonus   @relation(fields: [specialBonusId], references: [id])
  totalPurchaseAmount       Float
  cn                  Float     
  incentivePoint      Float
  order               Int
  color               String?       @default("#1677ff")
  minisizeId             Int       
  minisize               Minisize        @relation(fields: [minisizeId], references: [id])
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model TotalPurchaseHistory {
  id                  Int          @id @default(autoincrement())
  userId              Int
  user                User   @relation(fields: [userId], references: [id])
  totalPurchaseId     Int
  totalPurchase       TotalPurchase   @relation(fields: [totalPurchaseId], references: [id])
  cn                  Float     
  incentivePoint      Float
  loyaltyPoint        Float
  level               Int
  totalSpend          Float
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model SpecialBonusHistory {
  id                  Int          @id @default(autoincrement())
  userId              Int
  user                User   @relation(fields: [userId], references: [id])
  specialBonusId     Int
  specialBonus       SpecialBonus   @relation(fields: [specialBonusId], references: [id])
  cn                  Float     
  incentivePoint      Float
  totalSpend          Json
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

enum ConditionType {
  Before  @map("before")
  After   @map("after")
}

enum ClaimStatus {
  InProgress  @map("inProgress")
  Complete   @map("complete")
  Incomplete   @map("incomplete")

}

model Claim {
  id                  Int          @id @default(autoincrement())
  userId              Int
  user                User   @relation(fields: [userId], references: [id])
  productId     Int
  product       Product   @relation(fields: [productId], references: [id])
  condition     ConditionType
  details       String
  claimNo       String
  status        ClaimStatus
  statusMessage       String?
  images              ImageClaim[]
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

enum ImageClaimType {
  Image  @map("image")
  Video   @map("video")
  File   @map("file")
}

enum ImageClaimRole {
  User  @map("user")
  Admin   @map("admin")
}

model ImageClaim {
  id          Int           @id @default(autoincrement())
  claimId              Int
  claim                Claim   @relation(fields: [claimId], references: [id])
  url        String
  type       ImageClaimType
  role       ImageClaimRole
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model UserManual {
  id          Int           @id @default(autoincrement())
  name        String
  content        String
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model MemoCredit {
  id          Int           @id @default(autoincrement())
  userId              Int
  user                User         @relation(fields: [userId], references: [id])
  documentNo          String
  date                DateTime    
  totalAmount         Int
  amountIncludingVAT  Int
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
}

model RewardPoint {
  id                  Int          @id @default(autoincrement())
  month               Int
  year                Int
  resetDate           DateTime?
  isFinalize          Boolean            
  expenses            Int
  point               Int
  rewardPointHistories               RewardPointHistory[]
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}

model RewardPointHistory {
  id                  Int          @id @default(autoincrement())
  point               Int
  incentivePoint      Int
  loyaltyPoint        Int
  usedPoint           Int
  totalPoint          Int
  totalSpend          Int
  rewardPointId       Int
  rewardPoint         RewardPoint   @relation(fields: [rewardPointId], references: [id])
  userId              Int
  user                User   @relation(fields: [userId], references: [id])
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
}